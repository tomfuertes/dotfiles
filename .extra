# TomF Specific brews and startup installs
function custom-brew-install() {
  # cat ~/.zshrc and run those
  mkdir -p "$HOME/.nvm"
  mkdir -p "$HOME/.zsh"

  # download + install homebrew
  brew install gh
  brew install git-flow
  brew tap heroku/brew && brew install heroku
  brew uninstall node
  brew install nvm
  brew install redis
  brew install the_silver_searcher
  brew install wget
  brew install z
}


# Git credentials
# Not in the repository, to prevent people from accidentally committing under my name
GIT_AUTHOR_NAME="Tom Fuertes"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"
GIT_AUTHOR_EMAIL="tomfuertes@gmail.com"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"

# Not a config for this but don't want to edit merge messages locally
export GIT_MERGE_AUTOEDIT=no

git config --global push.default current
git config --global fetch.prune true # http://stackoverflow.com/a/8255687/94668
git config --global pull.rebase true
git config --global alias.st status
git config --global alias.ci commit
git config --global alias.fs 'flow feature start'
git config --global alias.ff 'flow feature finish'
git config --global alias.fl 'flow feature list'
git config --global alias.fc 'flow feature checkout'
git config --global alias.fr 'flow feature rebase'
git config --global alias.rs 'flow release start'
git config --global alias.rf 'flow release finish'
git config --global alias.rl 'flow release list'
git config --global alias.rc 'flow release checkout'
git config --global alias.hs 'flow hotfix start'
git config --global alias.hf 'flow hotfix finish'
git config --global alias.hl 'flow hotfix list'
git config --global alias.hc 'flow hotfix checkout'
git config --global commit.gpgsign false
git config --global merge.ff no

# Add Visual Studio Code (code)
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# ulimit
ulimit -n 2560

# Happens in zshrc
# # rvm
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# # rbenv
# eval "$(rbenv init - zsh)"

# https://github.com/rbenv/ruby-build/wiki#suggested-build-environment
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

[[ -s "$HOME/.avn/bin/avn.sh" ]] && source "$HOME/.avn/bin/avn.sh" # load avn

# minor aliases
alias ll="la -h"

# brew install z.sh
alias j=z
. `brew --prefix`/etc/profile.d/z.sh

# todo
alias todo="subl ~/Dropbox/todo.txt"

# http://stackoverflow.com/a/26803738/94668
alias prune='git branch --merged | grep -v "\*" | egrep -v "master\|development" | xargs -n 1 git branch -d'

# subl -> code
alias subl=code

# Larger bash history (default is 500)
export HISTSIZE=10000000
export SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Misc settings
export EDITOR='code -w'

alias clean='find . -name "*.pyc" -delete; find . -name ".DS_Store" -delete; if [ -d .git ]; then git clean -fdx -- tmp; fi;'

### NOTICES ###
# Notice title
notice() { echo -e "\033[1;32m=> $1\033[0m"; }
# Notice title
msg() { echo -e "\033[1;34m=> $1\033[0m"; }
# Error title
error() { echo -e "\033[1;31m=> Error: $1\033[0m"; }
# List item
c_list() { echo -e "  \033[1;32m✔\033[0m $1"; }
# Error list item
e_list() { echo -e "  \033[1;31m✖\033[0m $1"; }

# Update Helpers
alias brup="brew update; brew upgrade; brew cleanup"
alias nup="npm install -g npm@latest; npm update -g --quiet"
alias dup=". ~/sandbox/git-repos/dotfiles/bootstrap.sh -f"
alias gemup="gem update --system && rvm get stable"
alias gup="gg ~/sandbox/git-repos/*"
alias pup="pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U"
alias gst="gs ~/sandbox/git-repos/*"
alias si='git commit -am ":shipit:"'
alias sip='si && git push'
alias pub='git push && git push heroku'
alias puba='git push && git push staging && git push heroku'
alias puball='puba'
alias gpp='si && pub'
alias hlt="heroku logs --tail"
alias hltr="heroku logs --tail -n 1000 -r heroku"
alias hlts="heroku logs --tail -n 1000 -r staging"

alias up="\
  notice 'Software Update'; \
  sudo softwareupdate -i -a; \
  notice '~/sandbox/git-repos/* Update'; \
  gup; \
  notice 'Brew Update'; \
  brup; \
"
#   notice 'NPM Update'; \
#   nup; \
#   notice 'Gem Update'; \
#   gemup; \
#   notice 'Pip Update'; \
#   pup; \
#   notice '~/.dotfiles Update'; \
#   dup; \
#"

function gg() {
  if [ $# -gt 0 ]; then
    for i in $(echo $*); do
      if [ -d ${i}/.git ]; then
        ( msg "Pulling ${i}" && cd ${i} && git pull | grep -vi "Current branch .* is up to date" )
        ( cd ${i} && git status -s )
      fi
    done
  else
    echo "usage: gg <git repo dir>"
  fi
}

function gs() {
  if [ $# -gt 0 ]; then
    for i in $(echo $*); do
      if [ -d ${i}/.git ]; then
        ( msg "Status ${i}" && cd ${i}; git cherry -v origin/master | wc -l | grep -v ' 0'; git status -s )
      fi
    done
  else
    echo "usage: gst <git repo dir>"
  fi
}

function gz() {
  if [ $# -gt 0 ]; then
    for i in $(echo $*); do
      if [ -d ${i} ]; then
        ( msg "Tarring into ~/sandbox/backups/${i%/}.$(date "+%Y-%m-%d-%H-%M-%S").tgz" && tar zcf ~/sandbox/backups/${i%/}.$(date "+%Y-%m-%d-%H-%M-%S").tgz ${i%/} )
      fi
    done
  else
    echo "usage: gz <dir name>"
  fi
}

alias c="clear"
alias G="gh browse"

alias taillog="tail -f log/development.log"
alias tailog="taillog"
